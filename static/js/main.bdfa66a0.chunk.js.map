{"version":3,"sources":["index.js"],"names":["Square","props","className","valueI","onClick","React","Component","Board","i","squares","this","state","slice","calculateWinner","xIsNext","console","log","setState","player","active","playerTurn","renderSquare","GameInfoStatus","status","indexOf","alert","displayWinner","Game","history","Array","fill","stepNumber","step","length","concat","currentHistory","winner","moves","map","move","desc","key","goBackTo","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bdfa66a0.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nfunction Square(props) {\n  return (\n    <button\n      className={\"square \" + props.valueI + \"-Player\"}\n      onClick={props.onClick}\n    >\n      {props.valueI}\n    </button>\n  );\n}\n\nclass NewGameButton extends React.Component {\n  render() {\n    return <button className=\"newgame\">New Game</button>;\n  }\n}\n\nclass Board extends React.Component {\n  handleClick(i) {\n    const squares = this.state.squares.slice();\n\n    if (calculateWinner(squares) || squares[i]) {\n      //Ignore the click if winner or square is filled\n\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n\n    console.log(squares[i]);\n\n    this.setState({\n      squares: squares,\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n\n  renderSquare(i) {\n    // console.log(this.props.squares[i]);\n    return (\n      <Square\n        valueI={this.props.squares[i]}\n        player={\n          this.props.active === i && this.props.squares\n            ? this.props.playerTurn\n            : \"\"\n        }\n        onClick={() => {\n          this.props.onClick(i);\n        }}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"board-container\">\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n}\n\nclass GameInfoStatus extends React.Component {\n  displayWinner() {\n    if (this.props.status.indexOf(\"Winner\") !== -1) alert(this.props.status);\n  }\n  render() {\n    this.displayWinner();\n\n    return <div className=\"game-info--status\">{this.props.status}</div>;\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [\n        {\n          squares: Array(9).fill(null),\n        },\n      ],\n      xIsNext: true,\n      stepNumber: 0,\n    };\n  }\n\n  goBackTo(step) {\n    if (step > this.state.stepNumber) step = this.state.stepNumber;\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0,\n      history: this.state.history.slice(0, step + 1),\n    });\n  }\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1); // Throw away future history, if went back\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n\n    console.log(squares);\n    this.setState({\n      history: history.concat([\n        {\n          squares: squares,\n        },\n      ]),\n\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n      active: i,\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const currentHistory = history[this.state.stepNumber];\n\n    const winner = calculateWinner(currentHistory.squares);\n\n    const moves = history.map((step, move) => {\n      const desc = move ? \"Visit move #\" + move : \"Restart\";\n\n      return (\n        <li className=\"moves\" key={move}>\n          <button\n            className=\"moves--element\"\n            onClick={() => this.goBackTo(move)}\n          >\n            {desc}\n          </button>\n        </li>\n      );\n    });\n\n    var status;\n    if (winner) {\n      status = \"Winner: \" + winner;\n\n      console.log(status);\n\n      /*this.setState({\n        stepNumber: 0,\n        xIsNext: true,\n        history: this.state.history.slice(0, 1),\n      });*/\n    } else {\n      status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={currentHistory.squares}\n            onClick={(i) => this.handleClick(i)}\n            active={this.state.active}\n            playerTurn={this.state.xIsNext ? \"X-Player\" : \"O-Player\"}\n          />\n        </div>\n        <div className=\"game-info\">\n          <GameInfoStatus\n            status={winner ? \"Winner: Player \" + winner : status}\n          />\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n"],"sourceRoot":""}