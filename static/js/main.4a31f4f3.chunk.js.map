{"version":3,"sources":["index.js"],"names":["Square","props","className","valueI","onClick","React","Component","Board","i","squares","this","state","slice","calculateWinner","xIsNext","console","log","setState","player","active","playerTurn","renderSquare","Game","history","Array","fill","stepNumber","step","length","concat","status","currentHistory","winner","moves","map","move","desc","key","goBackTo","alert","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4a31f4f3.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nfunction Square(props) {\n  return (\n    <button\n      className={\"square \" + props.valueI + \"-Player\"}\n      onClick={props.onClick}\n    >\n      {props.valueI}\n    </button>\n  );\n}\n\nclass NewGameButton extends React.Component {\n  render() {\n    return <button className=\"newgame\">New Game</button>;\n  }\n}\n\nclass Board extends React.Component {\n  handleClick(i) {\n    const squares = this.state.squares.slice();\n\n    if (calculateWinner(squares) || squares[i]) {\n      //Ignore the click if winner or square is filled\n\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n\n    console.log(squares[i]);\n\n    this.setState({\n      squares: squares,\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n\n  renderSquare(i) {\n    // console.log(this.props.squares[i]);\n    return (\n      <Square\n        valueI={this.props.squares[i]}\n        player={\n          this.props.active === i && this.props.squares\n            ? this.props.playerTurn\n            : \"\"\n        }\n        onClick={() => {\n          this.props.onClick(i);\n        }}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [\n        {\n          squares: Array(9).fill(null),\n        },\n      ],\n      xIsNext: true,\n      stepNumber: 0,\n    };\n  }\n\n  goBackTo(step) {\n    if (step > this.state.stepNumber) step = this.state.stepNumber;\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0,\n      history: this.state.history.slice(0, step + 1),\n    });\n  }\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1); // Throw away future history, if went back\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n\n    console.log(squares);\n    this.setState({\n      history: history.concat([\n        {\n          squares: squares,\n        },\n      ]),\n\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n      active: i,\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const currentHistory = history[this.state.stepNumber];\n\n    const winner = calculateWinner(currentHistory.squares);\n\n    const moves = history.map((step, move) => {\n      const desc = move ? \"Visit move #\" + move : \"Restart\";\n\n      return (\n        <li className=\"moves\" key={move}>\n          <button\n            className=\"moves--element\"\n            onClick={() => this.goBackTo(move)}\n          >\n            {desc}\n          </button>\n        </li>\n      );\n    });\n\n    let status;\n    if (winner) {\n      status = \"Winner: \" + winner;\n      alert(\"Winner: \" + winner);\n\n      this.setState({\n        stepNumber: 0,\n        xIsNext: true,\n        history: this.state.history.slice(0, 1),\n      });\n    } else {\n      status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={currentHistory.squares}\n            onClick={(i) => this.handleClick(i)}\n            active={this.state.active}\n            playerTurn={this.state.xIsNext ? \"X-Player\" : \"O-Player\"}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n"],"sourceRoot":""}